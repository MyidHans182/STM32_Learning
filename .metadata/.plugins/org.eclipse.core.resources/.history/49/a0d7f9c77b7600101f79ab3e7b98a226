// Where is the LED connected?
// Port: A
// Pin:  5

#define PERIPH_BASE  			(0x40000000UL)

#define AHB1PERIPH_OFFSET 		(0x00020000UL)
#define AHB1PERIPH_BASE 		(PERIPH_BASE + AHB1PERIPH_OFFSET)

#define GPIOA_OFFSET			(0x0000UL)
#define GPIOA_BASE				(AHB1PERIPH_BASE + GPIOA_OFFSET)

#define RCC_OFFSET				(0x3800Ul)
#define RCC_BASE				(AHB1PERIPH_BASE + RCC_OFFSET)

#define AHB1EN_R_OFFSET			(0x30UL)
#define RCC_AHB1EN_R			(*(volatile unsigned int*)(RCC_BASE + AHB1EN_R_OFFSET))// Register

#define MODE_R_OFFSET			(0x00UL)
#define	GPIOA_MODE_R			(*(volatile unsigned int*)(GPIOA_BASE + MODE_R_OFFSET))	// Register

#define OD_R_OFFSET				(0x14UL)
#define GPIO_OD_R				(*(volatile unsigned int*)(GPIOA_BASE + OD_R_OFFSET)) 	// Register

#define GPIOAEN					(1U << 0)

#define PIN5					(1U << 5)
#define LED_PIN5				PIN5
//	(1u << 10) // set bit 10 to 1
//	&=~(1u << 11) // set bit 11 to 0
typedef struct {
    volatile uint32_t MODER;   // 0x00
    volatile uint32_t OTYPER;  // 0x04
    volatile uint32_t OSPEEDR; // 0x08
    volatile uint32_t PUPDR;   // 0x0C
    volatile uint32_t IDR;     // 0x10
    volatile uint32_t ODR;     // 0x14
    volatile uint32_t BSRR;    // 0x18
    volatile uint32_t LCKR;    // 0x1C
    volatile uint32_t AFR[2];  // 0x20, 0x24
} GPIO_TypeDef;

typedef struct {
    volatile uint32_t CR;         // 0x00
    volatile uint32_t PLLCFGR;    // 0x04
    volatile uint32_t CFGR;       // 0x08
    volatile uint32_t CIR;        // 0x0C
    volatile uint32_t AHB1RSTR;   // 0x10
    volatile uint32_t AHB2RSTR;   // 0x14
    volatile uint32_t AHB3RSTR;   // 0x18
    uint32_t            RESERVED0;
    volatile uint32_t APB1RSTR;   // 0x20
    volatile uint32_t APB2RSTR;   // 0x24
    uint32_t            RESERVED1[2];
    volatile uint32_t AHB1ENR;    // 0x30
    volatile uint32_t AHB2ENR;    // 0x34
    volatile uint32_t AHB3ENR;    // 0x38
    uint32_t            RESERVED2;
    volatile uint32_t APB1ENR;    // 0x40
    volatile uint32_t APB2ENR;    // 0x44
} RCC_TypeDef

int main(void)
{
	//1. Enable clock access to GPIOA//
	RCC_AHB1EN_R |= GPIOAEN;
	//2. Set PA5 as output pin //
	GPIOA_MODE_R |= (1u << 10); // set bit 10 to 1
	GPIOA_MODE_R &=~(1u << 11); // set bit 11 to 0
	while(1)
	{
		// 3. Set PIN5 as high
//		GPIO_OD_R |= LED_PIN5;
		// 4. toggle PIN5
		GPIO_OD_R ^= LED_PIN5;
		for( int i = 0; i < 100000;i++)
		{

		}

	}
}

